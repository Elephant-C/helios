package de.uni_hd.giscience.helios.core.scanner.detector;

import de.uni_hd.giscience.helios.core.scanner.FWFSettings;
import de.uni_hd.giscience.helios.core.scanner.Scanner;
import static de.uni_hd.giscience.helios.core.scanner.detector.AbstractPulseRunnable.cfg_speedOfLight_mPerNanosec;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.TreeMap;
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

public class FullWaveformPulseRunnableTest {
    
    Scanner scanner;
    FullWaveformPulseDetector detector;
    FullWaveformPulseRunnable worker;
    
    public FullWaveformPulseRunnableTest() {        
        scanner = new Scanner(0.0003d, Vector3D.ZERO, Rotation.IDENTITY, new ArrayList<>(Arrays.asList(100000,400000)), 4.0d, "", "Default", 4.0, 1.0, 0.99, 0.15, 23.0, 1064);
        detector = new FullWaveformPulseDetector(scanner, 0, 0);
        detector.scanner.FWF_settings = new FWFSettings();
        detector.scanner.FWF_settings.pulseLength_ns = 4.0d;
        worker = new FullWaveformPulseRunnable(detector, Vector3D.ZERO, Rotation.IDENTITY, 0, 0, null);
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    @Test
    public void testCalcTimePropagation() {
        System.out.println("calcTimePropagation");
        ArrayList<Double> timeWave = new ArrayList<>(Arrays.asList(0.0, 0.0045687297175391476, 0.017039421413816598, 0.03574676524728525, 0.059253445330128884, 0.08632429099054241, 0.115903059015376, 0.1470915972436783, 0.17913116242298838, 0.21138568581963751, 0.24332679885779068, 0.2745204482017271, 0.3046149453315586, 0.333330309922254, 0.36044877933688413, 0.3858063683950488, 0.4092853743751408, 0.43080773204485967, 0.4503291324710355, 0.46783382751325864, 0.48333004932554874, 0.4968459809399915, 0.5084262201442209, 0.5181286844441821, 0.5260219099736306, 0.5321827018169882, 0.5366940973933866, 0.5396436083444003, 0.5411217098102864, 0.5412205491008252, 0.5400328485956503, 0.537650980271438, 0.534166191573339, 0.5296679644474253, 0.5242434912495885, 0.5179772529624715, 0.5109506867022309, 0.5032419308963817, 0.49492563777648346, 0.4860728439675876, 0.47675089098170886, 0.467023388345541, 0.4569502129228052, 0.4465875387376632, 0.43598789227549295, 0.4252002288382062, 0.4142700260697639, 0.4032393912495794, 0.3921471793825204, 0.38102911949917406, 0.36991794692340163, 0.3588435395700567, 0.34783305660777925, 0.33691107806335446, 0.3260997441582984, 0.3154188933578455, 0.30488619827989155, 0.29451729875893423, 0.28432593148972185, 0.27432405578900865, 0.26452197511322667, 0.2549284540565019, 0.2455508306286718, 0.23639512367801865, 0.22746613537943636, 0.21876754875670948, 0.2103020202484053, 0.20207126736137326, 0.19407615148475196, 0.18631675596134922, 0.17879245953289338, 0.17150200529146029, 0.16444356528186016, 0.1576148009093242, 0.15101291931385555, 0.14463472587743692, 0.13847667303321776, 0.1325349055471095, 0.12680530244213054, 0.12128351573458496, 0.11596500614890468, 0.11084507597491175, 0.1059188992275006, 0.10118154926443791, 0.09662802401323384, 0.09225326895295687, 0.08805219799152936, 0.08401971237352501, 0.08015071774786088, 0.07644013951908708, 0.07288293660027728, 0.06947411367984963, 0.06620873210904012, 0.06308191951123086, 0.06008887820893427, 0.05722489255896343, 0.05448533528120276, 0.05186567286143412, 0.049361470103890664, 0.04696839390460195));
        assertEquals(29, worker.calcTimeWave(timeWave));
    }  
    
    @Test
    public void testCalcFullWaveform() {
        System.out.println("testCalcFullWaveform");
        ArrayList<Double> fullWaveform = new ArrayList<>(Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3730912859963675, 1.3914720372951028, 2.919149838328258, 4.838750699798607, 7.049408200871568, 9.464867482301218, 12.011783705266527, 14.628196431461204, 17.262163060534974, 19.87053599487847, 22.417869601410484, 24.875444316867835, 27.220396407570124, 29.43494295632223, 31.505692616815146, 33.423033557646114, 35.180590821286195, 36.77474605474022, 38.20421323446977, 39.46966461405945, 40.57340167430024, 41.5190663566003, 42.311388316271, 42.955964346263755, 43.45906649799977, 43.827475767380534, 44.0683385239471, 44.189043142262236, 44.1971145494791, 44.100124634064954, 43.90561666990527, 43.62104209947092, 43.25370819117072, 42.810735241060684, 42.29902212922456, 41.72521916773444, 41.09570729138178, 40.41658274546821, 39.69364651789013, 38.932397846482075, 38.13803120795487, 37.31543626255727, 36.469200289513445, 35.60361270299103, 34.72267128742373, 33.830089834985415, 32.929306907376464, 32.02349547928124, 31.115573252291508, 30.208213456130185, 29.30385597898606, 28.404718690985177, 27.512808844552186, 26.62993445290485, 25.757715563400765, 24.897595356123965, 24.050851010143084, 23.218604290461936, 22.40183181796714, 21.601374992795733, 20.81794954861897, 20.052154721481923, 19.30448202215118, 18.57532360549638, 17.864980234347687, 17.173668838605213, 16.50152967319292, 15.848633080810279, 15.21498586739182, 14.600537299788103, 14.005184736472316, 13.42877890309586, 12.87112882549663, 12.332006433337295, 11.811150847945221, 11.308272368164888, 10.823056168140349, 10.355165720938146, 9.904245961818432, 9.4699262047779, 9.051822825737235, 8.649541725438969, 8.262680584770331, 7.8908309248382205, 7.533579983708572, 7.1905124212865985, 6.861211863364022, 6.545262295399741, 6.242249316135778, 5.951761260684858, 5.673390202262676, 5.406732841279991, 5.15139129005891, 4.906973760996684, 4.673095165569879, 4.449377631153994, 4.23545094222868, 4.030952912148061, 3.8355296912793877, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
        TreeMap<Double, Double> reflections = new TreeMap<>();       
        reflections.put(955.7003704937769, 81.6620445696104);  
        reflections.put(955.7003928409027, 81.662036889235);
        reflections.put(955.7004439391789, 158.76671069312428); 
        reflections.put(955.7004538943913, 81.66201590606184);
        reflections.put(955.7004538943914, 81.6620159060618); 
        reflections.put(955.7004856394908, 158.76668285454048); 
        reflections.put(955.700485639491, 158.76668285454036); 
        reflections.put(955.7005240214021, 198.15532429974428); 
        reflections.put(955.7005372950205, 81.66198724252077); 
        reflections.put(955.7005372950206, 81.66198724252081); 
        reflections.put(955.700569040126, 158.76662717738384); 
        reflections.put(955.7006107404488, 158.766599338811); 
        reflections.put(955.7006206956643, 81.66195857898728);
        reflections.put(955.7006206956644, 81.66195857898722); 
        reflections.put(955.7006817491822, 81.66193759582917); 
        reflections.put(955.7006817491823, 81.66193759582917); 
        reflections.put(955.7007040963224, 81.66192991546137);       
        double maxHitTime_ns = reflections.lastKey() / cfg_speedOfLight_mPerNanosec + detector.scanner.FWF_settings.pulseLength_ns;	
		double minHitTime_ns = reflections.firstKey() / cfg_speedOfLight_mPerNanosec - detector.scanner.FWF_settings.pulseLength_ns;
		double totalHitTime_ns = maxHitTime_ns - minHitTime_ns;
        assertEquals(fullWaveform, worker.calcFullWaveform(reflections, maxHitTime_ns, minHitTime_ns, totalHitTime_ns));
    }
}
